from flask import Flask, jsonify, request

app = Flask(__name__)

# Sample data
books = [
    {"id": 1, "title": "Book 1", "author": "Author 1"},
    {"id": 2, "title": "Book 2", "author": "Author 2"},
    {"id": 3, "title": "Book 3", "author": "Author 3"}
]

# Route to get all books
@app.route('/books', methods=['GET'])
def get_books():
    return jsonify(books)

# Route to get a specific book by id
@app.route('/books/<int:id>', methods=['GET'])
def get_book(id):
    book = next((book for book in books if book['id'] == id), None)
    if book:
        return jsonify(book)
    else:
        return jsonify({"error": "Book not found"}), 404

# Route to add a new book
@app.route('/books', methods=['POST'])
def add_book():
    new_book = request.json
    books.append(new_book)
    return jsonify({"message": "Book added successfully"}), 201

# Route to update a book by id
@app.route('/books/<int:id>', methods=['PUT'])
def update_book(id):
    book_index = next((index for index, book in enumerate(books) if book['id'] == id), None)
    if book_index is not None:
        books[book_index] = request.json
        return jsonify({"message": "Book updated successfully"}), 200
    else:
        return jsonify({"error": "Book not found"}), 404

# Route to delete a book by id
@app.route('/books/<int:id>', methods=['DELETE'])
def delete_book(id):
    global books
    initial_length = len(books)
    books = [book for book in books if book['id'] != id]
    if len(books) < initial_length:
        return jsonify({"message": "Book deleted successfully"}), 200
    else:
        return jsonify({"error": "Book not found"}), 404


if __name__ == '__main__':
    app.run(debug=True)